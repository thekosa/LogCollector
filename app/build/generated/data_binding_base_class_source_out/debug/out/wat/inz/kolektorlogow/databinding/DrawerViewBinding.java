// Generated by view binder compiler. Do not edit!
package wat.inz.kolektorlogow.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import wat.inz.kolektorlogow.R;

public final class DrawerViewBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Spinner columnSortSpinner;

  @NonNull
  public final CheckBox datetimeColumnVisibilityCheckbox;

  @NonNull
  public final Spinner directionSortSpinner;

  @NonNull
  public final CheckBox messageColumnVisibilityCheckbox;

  @NonNull
  public final CheckBox pidColumnVisibilityCheckbox;

  @NonNull
  public final EditText pidFilterEdittext;

  @NonNull
  public final CheckBox priorityColumnVisibilityCheckbox;

  @NonNull
  public final Spinner priorityFilterSpinner;

  @NonNull
  public final CheckBox tagColumnVisibilityCheckbox;

  @NonNull
  public final EditText tagFilterEdittext;

  @NonNull
  public final CheckBox tidColumnVisibilityCheckbox;

  @NonNull
  public final EditText tidFilterEdittext;

  private DrawerViewBinding(@NonNull LinearLayout rootView, @NonNull Spinner columnSortSpinner,
      @NonNull CheckBox datetimeColumnVisibilityCheckbox, @NonNull Spinner directionSortSpinner,
      @NonNull CheckBox messageColumnVisibilityCheckbox,
      @NonNull CheckBox pidColumnVisibilityCheckbox, @NonNull EditText pidFilterEdittext,
      @NonNull CheckBox priorityColumnVisibilityCheckbox, @NonNull Spinner priorityFilterSpinner,
      @NonNull CheckBox tagColumnVisibilityCheckbox, @NonNull EditText tagFilterEdittext,
      @NonNull CheckBox tidColumnVisibilityCheckbox, @NonNull EditText tidFilterEdittext) {
    this.rootView = rootView;
    this.columnSortSpinner = columnSortSpinner;
    this.datetimeColumnVisibilityCheckbox = datetimeColumnVisibilityCheckbox;
    this.directionSortSpinner = directionSortSpinner;
    this.messageColumnVisibilityCheckbox = messageColumnVisibilityCheckbox;
    this.pidColumnVisibilityCheckbox = pidColumnVisibilityCheckbox;
    this.pidFilterEdittext = pidFilterEdittext;
    this.priorityColumnVisibilityCheckbox = priorityColumnVisibilityCheckbox;
    this.priorityFilterSpinner = priorityFilterSpinner;
    this.tagColumnVisibilityCheckbox = tagColumnVisibilityCheckbox;
    this.tagFilterEdittext = tagFilterEdittext;
    this.tidColumnVisibilityCheckbox = tidColumnVisibilityCheckbox;
    this.tidFilterEdittext = tidFilterEdittext;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DrawerViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DrawerViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.drawer_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DrawerViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.column_sort_spinner;
      Spinner columnSortSpinner = ViewBindings.findChildViewById(rootView, id);
      if (columnSortSpinner == null) {
        break missingId;
      }

      id = R.id.datetime_column_visibility_checkbox;
      CheckBox datetimeColumnVisibilityCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (datetimeColumnVisibilityCheckbox == null) {
        break missingId;
      }

      id = R.id.direction_sort_spinner;
      Spinner directionSortSpinner = ViewBindings.findChildViewById(rootView, id);
      if (directionSortSpinner == null) {
        break missingId;
      }

      id = R.id.message_column_visibility_checkbox;
      CheckBox messageColumnVisibilityCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (messageColumnVisibilityCheckbox == null) {
        break missingId;
      }

      id = R.id.pid_column_visibility_checkbox;
      CheckBox pidColumnVisibilityCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (pidColumnVisibilityCheckbox == null) {
        break missingId;
      }

      id = R.id.pid_filter_edittext;
      EditText pidFilterEdittext = ViewBindings.findChildViewById(rootView, id);
      if (pidFilterEdittext == null) {
        break missingId;
      }

      id = R.id.priority_column_visibility_checkbox;
      CheckBox priorityColumnVisibilityCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (priorityColumnVisibilityCheckbox == null) {
        break missingId;
      }

      id = R.id.priority_filter_spinner;
      Spinner priorityFilterSpinner = ViewBindings.findChildViewById(rootView, id);
      if (priorityFilterSpinner == null) {
        break missingId;
      }

      id = R.id.tag_column_visibility_checkbox;
      CheckBox tagColumnVisibilityCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (tagColumnVisibilityCheckbox == null) {
        break missingId;
      }

      id = R.id.tag_filter_edittext;
      EditText tagFilterEdittext = ViewBindings.findChildViewById(rootView, id);
      if (tagFilterEdittext == null) {
        break missingId;
      }

      id = R.id.tid_column_visibility_checkbox;
      CheckBox tidColumnVisibilityCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (tidColumnVisibilityCheckbox == null) {
        break missingId;
      }

      id = R.id.tid_filter_edittext;
      EditText tidFilterEdittext = ViewBindings.findChildViewById(rootView, id);
      if (tidFilterEdittext == null) {
        break missingId;
      }

      return new DrawerViewBinding((LinearLayout) rootView, columnSortSpinner,
          datetimeColumnVisibilityCheckbox, directionSortSpinner, messageColumnVisibilityCheckbox,
          pidColumnVisibilityCheckbox, pidFilterEdittext, priorityColumnVisibilityCheckbox,
          priorityFilterSpinner, tagColumnVisibilityCheckbox, tagFilterEdittext,
          tidColumnVisibilityCheckbox, tidFilterEdittext);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
